{"version":3,"sources":["components/Button.js","containers/NavLinks.js","containers/Header.js","components/ItemList.js","components/InfoCard.js","containers/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["Button","name","handleCategorySelect","className","onClick","NavLinks","Header","id","ItemList","itemList","handleItemSelect","isLoading","length","map","item","index","key","title","toLowerCase","InfoCard","selectedItem","itemInfo","Object","entries","alt","src","filter","elem","Array","isArray","Main","App","setState","state","bind","url","this","dataList","fetch","resp","json","data","concat","results","next","httpsNext","replace","console","log","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.db594d36.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Button.css'\n\nconst Button = ({ name, handleCategorySelect }) => {\n    return (\n        <button\n            className=\"navButton\"\n            onClick = {\n                () => handleCategorySelect(`https://swapi.dev/api/${name}/`)\n            }\n        >\n            {name}\n        </button>\n    )\n}\n\n\nexport default Button\n","import React from 'react';\nimport Button from '../components/Button'\nimport '../styles/NavLinks.css'\n\nconst NavLinks = ({ handleCategorySelect }) => {\n    return (\n        <nav>\n\n            <Button\n                name={`films`}\n                handleCategorySelect={handleCategorySelect}\n            />\n            <Button\n                name={`people`}\n                handleCategorySelect={handleCategorySelect}\n            />\n            <Button\n                name={`planets`}\n                handleCategorySelect={handleCategorySelect}\n            />\n            <Button\n                name={`species`}\n                handleCategorySelect={handleCategorySelect}\n            />\n            <Button\n                name={`vehicles`}\n                handleCategorySelect={handleCategorySelect}\n            />\n            <Button\n                name={`starships`}\n                handleCategorySelect={handleCategorySelect}\n            />\n\n        </nav>\n    )\n}\n\n\nexport default NavLinks","import React from 'react';\nimport NavLinks from './NavLinks'\nimport '../styles/Header.css'\n\nconst Header = ({ handleCategorySelect }) => {\n    return (\n        <header className=\"App-header\">\n            <h1 id=\"pageLogo\">@ info</h1>\n\n            <NavLinks\n                handleCategorySelect={handleCategorySelect}\n            />\n        </header>\n    )\n}\n\nexport default Header\n","import React from 'react';\nimport '../styles/ItemList.css'\n\nconst ItemList = ({ itemList, handleItemSelect, isLoading }) => {\n\n    return isLoading ?\n        <div className=\"itemList loading\">Loading...</div> :\n\n        // default display nothing\n        !itemList.length ?\n        <div></div> :\n        \n        // display itemlist once it has items from fetch\n        <div className=\"itemList\">\n            <ul>\n                {\n                    itemList.map((item, index) => {\n                        return (\n                            <li\n                                key={index}\n                                onClick={() => handleItemSelect(item)}\n                            >\n                                {item.title || item.name.toLowerCase()}\n                            </li>\n                        )   \n                    })\n                }\n            </ul>\n        </div>\n}\n\nexport default ItemList;","import React from 'react';\nimport '../styles/InfoCard.css'\n\nconst InfoCard = ({ selectedItem }) => {\n\n    const itemInfo = Object.entries(selectedItem)\n\n    return itemInfo.length === 0 ?\n    \n        <div></div> :\n\n    (\n            <div className='shadow-5 infoCard'>\n                {/* random robot image placeholder */}\n                <img alt='robot' src={`https://robohash.org/${itemInfo[0][1]}?100x100`} />\n            {       \n                    itemInfo\n                        // filter removes entries that are arrays/metadata for readability\n                        .filter(elem =>\n                            !Array.isArray(elem[1]) &&\n                            elem[0] !== 'url' &&\n                            elem[0] !== 'homeworld' &&\n                            elem[0] !== 'created' &&\n                            elem[0] !== 'edited')\n                        // render the remaining entries in the card\n                        .map((elem, index) => {\n                        return (\n                            <div\n                                key={index}\n                            >\n                            <span className='infoKey'>{elem[0]}:</span> {elem[1]}\n                            </div>\n                        )\n                })       \n            }\n        </div>\n    )\n}\n\nexport default InfoCard;","import React from 'react';\nimport ItemList from '../components/ItemList';\nimport InfoCard from '../components/InfoCard';\n\nconst Main = ({ itemList, selectedItem, handleItemSelect, isLoading }) => {\n  return (\n    <main className=\"container-fluid row\">\n      <div className=\"col-md-6\">\n        <ItemList\n          itemList={itemList}\n          handleItemSelect={handleItemSelect}\n          isLoading={isLoading}\n        />\n      </div>\n      <div className=\"col-md-6\">\n        <InfoCard\n          selectedItem={selectedItem}\n        />\n      </div>\n    </main>\n  )\n}\n\nexport default Main","import React, {Component} from 'react'\nimport Header from './Header'\nimport Main from './Main'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      itemList: [],\n      selectedItem: {},\n      isLoading: false\n    }\n\n    this.handleCategorySelect = this.handleCategorySelect.bind(this)\n    this.handleItemSelect = this.handleItemSelect.bind(this)\n  }\n\n    // onClick handler called from Button.js\n  async handleCategorySelect(url) {\n    this.setState({ isLoading: true })\n    this.setState({ selectedItem: {} })\n        \n    try {\n      let dataList = []\n\n      // cache the first page of data from the API\n      let resp = await fetch(url)\n      let data = await resp.json()\n      dataList = dataList.concat(data.results)\n\n      // cache the rest of the pages if there are more\n      while (data.next !== null) {\n      let httpsNext = data.next.replace('http://', 'https://')\n      resp = await fetch(data.next.replace(httpsNext))\n      data = await resp.json()\n      dataList = dataList.concat(data.results)\n      }  \n\n      this.setState({ itemList: dataList })\n            \n      } catch (err) {\n        console.log('Big error', err)\n      }\n\n      this.setState({ isLoading: false })\n  }\n\n  // onClick handler called from ItemList.js\n  handleItemSelect = item => {\n    this.setState({ selectedItem: item })\n  }\n\n  render() {\n\n    const { itemList, selectedItem, isLoading } = this.state\n\n    return (\n      <div>\n        <Header handleCategorySelect={this.handleCategorySelect}/>\n\n        <Main\n          itemList={itemList}\n          isLoading={isLoading} \n          selectedItem={selectedItem}\n          handleItemSelect={this.handleItemSelect}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}