{"version":3,"sources":["components/Button.js","containers/NavLinks.js","containers/Header.js","components/ItemList.js","components/InfoCard.js","containers/Main.js","containers/App.js","serviceWorker.js","index.js"],"names":["Button","name","handleCategorySelect","className","onClick","NavLinks","Header","id","ItemList","itemList","handleItemSelect","length","map","item","index","key","title","toLowerCase","InfoCard","selectedItem","itemInfo","Object","entries","alt","src","entry","Main","App","setState","state","bind","url","fetch","resp","json","data","this","results","console","log","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.331f3beb.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../styles/Button.css'\r\n\r\nconst Button = ({ name, handleCategorySelect }) => {\r\n    return (\r\n        <button\r\n            className=\"navButton\"\r\n            onClick = {\r\n                () => handleCategorySelect(`https://swapi.co/api/${name}/`)\r\n            }\r\n        >\r\n            {name}\r\n        </button>\r\n    )\r\n}\r\n\r\n\r\nexport default Button\r\n","import React from 'react';\r\nimport Button from '../components/Button'\r\nimport '../styles/NavLinks.css'\r\n\r\nconst NavLinks = ({ handleCategorySelect }) => {\r\n    return (\r\n        <nav>\r\n\r\n            <Button\r\n                name={`films`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n            <Button\r\n                name={`people`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n            <Button\r\n                name={`planets`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n            <Button\r\n                name={`species`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n            <Button\r\n                name={`vehicles`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n            <Button\r\n                name={`starships`}\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\n\r\nexport default NavLinks","import React from 'react';\r\nimport NavLinks from './NavLinks'\r\nimport '../styles/Header.css'\r\n\r\nconst Header = ({ handleCategorySelect }) => {\r\n    return (\r\n        <header className=\"App-header\">\r\n            <h1 id=\"pageLogo\">@ info.2</h1>\r\n\r\n            <NavLinks\r\n                handleCategorySelect={handleCategorySelect}\r\n            />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react';\r\nimport '../styles/ItemList.css'\r\n\r\nconst ItemList = ({ itemList, handleItemSelect }) => {\r\n\r\n    return !itemList.length ?\r\n        <div></div> :\r\n\r\n        (\r\n        <div className=\"itemList\">\r\n            <ul>\r\n                {\r\n                    itemList.map((item, index) => {\r\n                        return (\r\n                            <li\r\n                                key={index}\r\n                                onClick={() => handleItemSelect(item)}\r\n                            >\r\n                                {item.title || item.name.toLowerCase()}\r\n                            </li>\r\n                        )   \r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ItemList;","import React from 'react';\r\nimport '../styles/InfoCard.css'\r\n\r\nconst InfoCard = ({ selectedItem }) => {\r\n\r\n    const itemInfo = Object.entries(selectedItem)\r\n\r\n\r\n    return Object.entries(selectedItem).length === 0 ?\r\n    \r\n        <div></div> :\r\n\r\n    (\r\n        <div className='shadow-5 infoCard'>\r\n            <img alt='robot' src={`https://robohash.org/1?100x100`} />\r\n            {       \r\n                    itemInfo.map((entry, index) => {\r\n                        return (\r\n                            <div\r\n                                key={index}\r\n                            >\r\n                                {entry[0]}: {entry[1]}\r\n                            </div>\r\n                        )\r\n                })       \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InfoCard;","import React from 'react';\r\nimport ItemList from '../components/ItemList';\r\nimport InfoCard from '../components/InfoCard';\r\n\r\nconst Main = ({ itemList, selectedItem, handleItemSelect }) => {\r\n    \r\n    \r\n    \r\n    return (\r\n        <main className=\"container-fluid row\">\r\n           \r\n                <div className=\"col-md-6\">\r\n                    <ItemList\r\n                        itemList={itemList}\r\n                        handleItemSelect={handleItemSelect}\r\n                    />\r\n                </div>\r\n                <div className=\"col-md-6\">\r\n                    <InfoCard\r\n                        selectedItem={selectedItem}\r\n                    />\r\n                </div>\r\n            \r\n        </main>\r\n    )\r\n}\r\n\r\nexport default Main","import React, {Component} from 'react'\r\nimport Header from './Header'\r\nimport Main from './Main'\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            itemList: [],\r\n            selectedItem: {}\r\n        }\r\n\r\n        this.handleCategorySelect = this.handleCategorySelect.bind(this)\r\n        this.handleItemSelect = this.handleItemSelect.bind(this)\r\n    }\r\n\r\n    // onClick handler called from Button.js\r\n    async handleCategorySelect(url) {\r\n        try {\r\n            const resp = await fetch(url)\r\n            const data = await resp.json()\r\n            this.setState({ itemList: data.results })\r\n        } catch (err) {\r\n            console.log('Big error', err)\r\n        }\r\n    }\r\n\r\n    // onClick handler called from ItemList.js\r\n    handleItemSelect = item => {\r\n        this.setState({ selectedItem: item })\r\n    }\r\n\r\n    async componentDidUpdate() {\r\n        console.log(this.state.selectedItem)\r\n    }\r\n\r\n    render() {\r\n\r\n        const { itemList, selectedItem } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <Header handleCategorySelect={this.handleCategorySelect}/>\r\n\r\n                <Main\r\n                    itemList={itemList}\r\n                    \r\n                    selectedItem={selectedItem}\r\n\r\n                    handleItemSelect={this.handleItemSelect}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.register();\n"],"sourceRoot":""}